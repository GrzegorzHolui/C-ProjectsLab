@page "/movies/details"
@inject BlazorAppLaby2.Data.ApplicationDbContext DB
@using BlazorAppLaby2.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
	<h4>Movie</h4>
	<hr />
	@if (movie is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<dl class="row">
			<dt class="col-sm-2">Title</dt>
			<dd class="col-sm-10">@movie.Title</dd>
			<dt class="col-sm-2">Description</dt>
			<dd class="col-sm-10">@movie.Description</dd>
			<dt class="col-sm-2">Release Date</dt>
			<dd class="col-sm-10">@movie.ReleaseDate</dd>
			<dt class="col-sm-2">Rate</dt>
			<dd class="col-sm-10">@movie.Rate</dd>
			@if (!string.IsNullOrEmpty(movie.ImageUrl))
			{
				<dt class="col-sm-2">Image</dt>
				<dd class="col-sm-10">
					<img src="@movie.ImageUrl" alt="Movie Image" style="max-width: 100%;" />
				</dd>
			}
		</dl>
		<div>
			<a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
			<a href="@($"/movies")">Back to List</a>
		</div>
	}
</div>


@if (movie != null)
{
	<div>
		<h4>Update Rating</h4>
		<hr />
		<form @onsubmit="UpdateRating">
			<label>New Rating:</label>
			<input type="number" step="0.1" min="0" max="10" @bind="newRating" />
			<button type="submit">Update</button>
		</form>
	</div>
}

@code {
	Movie movie;
	float newRating;
	int MovieCount;

	[SupplyParameterFromQuery]
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

		if (movie is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}

	private async Task UpdateRating()
	{
		MovieCount = await DB.Movie.CountAsync();
		float updatedRating = (float)(int)((movie.Rate + newRating) / MovieCount);
		movie.Rate = updatedRating;
		await DB.SaveChangesAsync();
		movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

	}
}
